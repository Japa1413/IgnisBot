#!/usr/bin/env python3
"""
Script de Verifica√ß√£o de Setup - IgnisBot
Verifica se tudo est√° configurado corretamente antes de executar o bot.
"""

import sys
import os
from pathlib import Path

def verificar_arquivo_env():
    """Verifica se o arquivo .env existe e tem as vari√°veis necess√°rias"""
    env_path = Path(".env")
    
    if not env_path.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("   ‚Üí Copie env.example para .env: cp env.example .env")
        print("   ‚Üí Edite .env com suas credenciais")
        return False
    
    # Ler .env e verificar vari√°veis obrigat√≥rias
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        obrigatorias = [
            "DISCORD_TOKEN",
            "DISCORD_CLIENT_ID", 
            "DISCORD_GUILD_ID",
            "DB_USER",
            "DB_PASSWORD"
        ]
        
        faltando = []
        for var in obrigatorias:
            if not os.getenv(var):
                faltando.append(var)
        
        if faltando:
            print(f"‚ö†Ô∏è Vari√°veis de ambiente faltando: {', '.join(faltando)}")
            print("   ‚Üí Configure no arquivo .env")
            return False
        
        print("‚úÖ Arquivo .env configurado corretamente")
        return True
    except ImportError:
        print("‚ö†Ô∏è python-dotenv n√£o instalado")
        print("   ‚Üí Execute: pip install python-dotenv")
        return False

def verificar_dependencias():
    """Verifica se as depend√™ncias est√£o instaladas"""
    dependencias = {
        "discord": "discord.py",
        "aiomysql": "aiomysql",
        "dotenv": "python-dotenv"
    }
    
    faltando = []
    for modulo, nome in dependencias.items():
        try:
            __import__(modulo)
            print(f"‚úÖ {nome} instalado")
        except ImportError:
            print(f"‚ùå {nome} N√ÉO instalado")
            faltando.append(nome)
    
    if faltando:
        print(f"\n‚ö†Ô∏è Instale as depend√™ncias faltantes:")
        print(f"   ‚Üí pip install {' '.join(faltando)}")
        print(f"   ‚Üí Ou: pip install -r requirements.txt")
        return False
    
    return True

def verificar_estrutura():
    """Verifica se a estrutura de arquivos est√° correta"""
    arquivos_obrigatorios = [
        "ignis_main.py",
        "utils/config.py",
        "utils/database.py",
        "cogs/data_privacy.py",
        "cogs/legal.py"
    ]
    
    todos_ok = True
    for arquivo in arquivos_obrigatorios:
        if Path(arquivo).exists():
            print(f"‚úÖ {arquivo} existe")
        else:
            print(f"‚ùå {arquivo} N√ÉO encontrado")
            todos_ok = False
    
    return todos_ok

def verificar_banco_dados():
    """Tenta conectar ao banco de dados"""
    try:
        from utils.config import DB_HOST, DB_USER, DB_PASSWORD, DB_NAME
        import aiomysql
        import asyncio
        
        async def testar_conexao():
            try:
                conn = await aiomysql.connect(
                    host=DB_HOST,
                    user=DB_USER,
                    password=DB_PASSWORD,
                    db=DB_NAME,
                    connect_timeout=5
                )
                conn.close()
                print("‚úÖ Conex√£o com banco de dados OK")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao conectar ao banco: {e}")
                print("   ‚Üí Verifique se o MySQL est√° rodando")
                print("   ‚Üí Verifique as credenciais no .env")
                return False
        
        return asyncio.run(testar_conexao())
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar banco de dados: {e}")
        return False

def main():
    print("=" * 60)
    print("üîç VERIFICA√á√ÉO DE SETUP - IGNISBOT")
    print("=" * 60)
    print()
    
    checks = []
    
    print("üì¶ Verificando depend√™ncias...")
    checks.append(("Depend√™ncias", verificar_dependencias()))
    print()
    
    print("üìÅ Verificando estrutura de arquivos...")
    checks.append(("Estrutura", verificar_estrutura()))
    print()
    
    print("‚öôÔ∏è Verificando configura√ß√£o (.env)...")
    checks.append(("Configura√ß√£o", verificar_arquivo_env()))
    print()
    
    print("üíæ Verificando banco de dados...")
    checks.append(("Banco de Dados", verificar_banco_dados()))
    print()
    
    print("=" * 60)
    print("üìä RESULTADO:")
    print("=" * 60)
    
    todos_ok = all(check[1] for check in checks)
    
    for nome, status in checks:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {nome}")
    
    print()
    
    if todos_ok:
        print("üéâ TUDO PRONTO! Voc√™ pode executar o bot com:")
        print("   ‚Üí python ignis_main.py")
    else:
        print("‚ö†Ô∏è ALGUMAS VERIFICA√á√ïES FALHARAM")
        print("   ‚Üí Corrija os problemas acima antes de executar")
    
    print("=" * 60)
    
    return 0 if todos_ok else 1

if __name__ == "__main__":
    sys.exit(main())

